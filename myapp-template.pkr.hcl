variable "aws_region" {
  type    = string
  default = "us-east-1"
}

variable "ssh_username" {
  type    = string
  default = "ubuntu"
}

variable "source_ami" {
  type    = string
  default = "ami-0887e1d5e322290cf"
}

variable "subnet_id" {
  type    = string
  default = "subnet-02d41e81eddf16052"
}

variable "ami_users" {
  type    = list(string)
  default = []
}

packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1"
    }
  }
}

source "amazon-ebs" "autogenerated_1" {
  ami_name        = "app-image-${formatdate("YYYY_MM_DD_HH_mm", timestamp())}"
  ami_description = "AMI for CSYE 6225"
  instance_type   = "t2.micro"
  region          = var.aws_region
  source_ami      = var.source_ami
  ami_regions     = ["us-east-1"]
  ssh_username    = var.ssh_username
  subnet_id       = var.subnet_id

  aws_polling {
    delay_seconds = 120
    max_attempts  = 50
  }

  launch_block_device_mappings {
    device_name           = "/dev/sda1"
    delete_on_termination = true
    volume_size           = 25
    volume_type           = "gp2"
  }
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "file" {
    source      = "./webapp.zip"
    destination = "~/"
  }

  provisioner "file" {
    source      = "./systemd/webapp.service"
    destination = "/tmp/webapp.service"
  }

  provisioner "file" {
    source      = "./systemd/cloudwatch-config.json"
    destination = "/tmp/cloudwatch-config.json"
  }

  provisioner "shell" {
    environment_vars = [
      "DEBIAN_FRONTEND=noninteractive",
      "CHECKPOINT_DISABLE=1"
    ]

    inline = [
      "sudo ls -l ~/webapp.zip",
      "sudo ls -l /tmp/webapp.service",

      # Update packege
      "sudo apt-get update",
      "sudo apt-get upgrade -y",

      # Set up user
      "sudo groupadd csye6225",
      "sudo useradd -s /bin/false -g csye6225 -d /opt/csye6225 -m csye6225",

      "sudo mkdir -p /opt/csye6225/webapp",
      "sudo chown -R csye6225:csye6225 /opt/csye6225",
      "sudo chmod -R 755 /opt/csye6225",

      # Update package list and upgrade the system
      "sudo apt-get update",
      "sudo apt-get upgrade -y",

      # Install Node.js and npm
      "curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -",
      "sudo apt-get install -y nodejs",

      # Install unzip utility
      "sudo apt-get install -y unzip",
      "sudo unzip -d /opt/csye6225/webapp /home/ubuntu/webapp.zip",
      "sudo chown -R csye6225:csye6225 /opt/csye6225/webapp",
      "sudo chmod -R 755 /opt/csye6225/webapp",
      "sudo rm ~/webapp.zip",

      # Prepare the application directory
      "cd /opt/csye6225/webapp",
      "sudo -u csye6225 npm install",
      "sudo -u csye6225 npm install dotenv",
      "sudo mkdir /opt/csye6225/webapp/logs",
      "sudo touch /opt/csye6225/webapp/logs/webapp.log",
      "sudo chown csye6225:csye6225 /opt/csye6225/webapp/logs/webapp.log",
      "sudo chown -R csye6225:csye6225 /opt/csye6225/webapp/logs",

      # Download cloudwatch agent
      "wget https://amazoncloudwatch-agent.s3.amazonaws.com/debian/amd64/latest/amazon-cloudwatch-agent.deb",

      # Install cloudwatch agent
      "sudo dpkg -i -E ./amazon-cloudwatch-agent.deb",

      # Delete the installer
      "sudo rm ./amazon-cloudwatch-agent.deb",

      # Move the cloudwatch config file to user's webapp folder with sudo
      "sudo mv /tmp/cloudwatch-config.json /opt/csye6225/webapp/cloudwatch-config.json",

      # Change ownership of the config file
      "sudo chown csye6225:csye6225 /opt/csye6225/webapp/cloudwatch-config.json",

      "sudo mv /tmp/webapp.service /etc/systemd/system/webapp.service",

      # Install PostgreSQL
      "apt install postgresql",
      "sudo apt install -y postgresql-common",
      "sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh",

      # Configure PostgreSQL to listen only on localhost (ignoring DB_HOST since it must be localhost for security reasons)
      "sudo sed -i \"s/#listen_addresses = 'localhost'/listen_addresses = 'localhost'/g\" /etc/postgresql/12/main/postgresql.conf",

      # Restart PostgreSQL to apply configuration changes
      "sudo systemctl restart postgresql",

      # set ownership to csye6225:csye6225
      "sudo apt-get remove --purge -y git",
      "sudo chown csye6225:csye6225 /etc/systemd/system/webapp.service",
      "sudo chmod -R 700 /opt/csye6225",

      # Set up services
      "sudo systemctl daemon-reload",
      "sudo systemctl enable webapp.service",
    ]

  }

}
