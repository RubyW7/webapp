name: Build and Share AMI

on:
  push:
    branches:
      - main

jobs:
  build_and_share_ami:
    name: Build and Share AMI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup environment variables
        run: |
          touch .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env

      - name: Create Application Artifact
        run: |
         mkdir artifacts
         zip -r artifacts/webapp.zip . -x "*.git*"

      - name: Install Packer
        run: |
          PACKER_VERSION="1.11.2" 
          PACKER_ZIP_FILE="packer_${PACKER_VERSION}_linux_amd64.zip"
          PACKER_URL="https://releases.hashicorp.com/packer/${PACKER_VERSION}/${PACKER_ZIP_FILE}"
          echo "Downloading Packer from ${PACKER_URL}..."
          wget $PACKER_URL
          if [ $? -ne 0 ]; then
            echo "Failed to download Packer"
            exit 1
          fi
          echo "Unzipping Packer..."
          unzip -o $PACKER_ZIP_FILE
          sudo mv packer /usr/local/bin/
          if [ $? -ne 0 ]; then
            echo "Failed to move Packer to /usr/local/bin"
            exit 1
          fi
          echo "Packer installation- successful"
          packer --version

      - name: Initialize Packer
        run: |
          cd packer/templates
          packer init .

      - name: Build AMI
        run: |
          cd packer/templates
          packer build myapp-template.pkr.hcl

      - name: Retrieve and Share AMI
        run: |
          echo "Retrieving AMI ID..."
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=your-ami-name" --query "Images[0].ImageId" --output text)
          echo "AMI ID: $AMI_ID"
          echo "Modifying AMI launch permissions..."
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId='703671935232'}]"
          echo "Permissions modified for AMI ID $AMI_ID"
