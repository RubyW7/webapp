name: Build and Share AMI

on:
  push:
    branches:
      - main

jobs:
  build_and_share_ami:
    name: Build and Share AMI
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{secrets.DB_USER}}
      DB_PORT: ${{secrets.DB_PORT}}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DB_NAME: ${{secrets.DB_NAME}}
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_REGION: ${{secrets.AWS_REGION}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create .env file
        run: |
          echo "DB_USER=${{secrets.DB_USER}}" >> .env
          echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
          echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
          echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{secrets.AWS_DEMO_ACCESS_KEY_ID}}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_DEMO_SECRET_ACCESS_KEY}}" >> .env
          echo "AWS_REGION=${{secrets.AWS_REGION}}" >> .env

      - name: Create Application Artifact
        run: zip -r webapp.zip .

      - name: Create variables.json with only region
        run: |
          echo '{
            "aws_region": "${{vars.AWS_REGION}}"
          }' > variables.json

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.10.0"

      - name: Initialize Packer
        run: packer init myapp-template.pkr.hcl

      - name: Build AMI
        run: packer build myapp-template.pkr.hcl

      - name: Share AMI
        id: get-latest-ami
        run: |
          latest_ami=$(aws ec2 describe-images \
                  --owners ${{secrets.AWS_DEV_USER_ID}} \
                  --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                  --region ${{secrets.AWS_REGION}} | tr -d '"')
          echo "Latest AMI ID: $latest_ami"
          aws ec2 modify-image-attribute --image-id $latest_ami --launch-permission "Add=[{UserId=703671935232}]" \
                  --region ${{secrets.AWS_REGION}}

  continuous_deployment:
    needs: build_and_share_ami
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }} && aws configure set default.region us-east-1

      - name: Set AWS Demo credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copying AMI Artifacts and Launching Template
        run: |
          pwd
          ls
          latestAmi=$(aws ec2 describe-images --filters "Name=owner-id,Values=${{ vars.AWS_DEV_USER_ID }}" --query "sort_by(Images, &CreationDate)[-1].[ImageId]" --output "text")
          echo "latest AMI:"
          echo $latestAmi
          aws ec2 create-launch-template-version --launch-template-name launchEc2 --launch-template-data "ImageId=$latestAmi" --source-version 1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Instance Refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name csye6225-asg-fall2024 --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' --desired-configuration '{"LaunchTemplate":{"LaunchTemplateName": "launchEc2" , "Version": "$Latest"}}'
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            refreshStatus=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name csye6225-asg-fall2024 --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$refreshStatus" = "Successful" ]; then
              echo "Instance Refresh completed successfully!"
              break
            elif [ "$refreshStatus" = "Failed" ]; then
              echo "Instance Refresh failed!"
              exit 1
            else
              echo "Waiting for Instance Refresh to complete..."
              sleep 60
            fi
          done
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
